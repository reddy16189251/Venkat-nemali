#include <iostream>
#include <condition_variable>
#include <thread>
#include <vector>
#include <random>
#include <mutex>

int reader = 0;
int c = 0;
const int X = 6;
std::mutex m;
std::condition_variable reader_cond;
std::condition_variable writer_cond;

void read()
 {
  std::mt19937 rng;
  rng.seed(std::random_device()());
  std::uniform_int_distribution<std::mt19937::result_type> dist(0, 20); 
  std::unique_lock<std::mutex> lk(m, std::defer_lock);
  for(int i = 0; i < X; i++) {
    std::this_thread::sleep_for(std::chrono::milliseconds(dist(rng)));
    lk.lock();
    if(reader == -1) {
      reader_cond.wait(lk, [](){ return reader!= -1; });
    }
    reader++;
    lk.unlock();
    std::cout << "read value: " << c << ", number of readers: " << reader << std::endl;
    lk.lock();
    reader--;
    if(reader == 0){
      writer_cond.notify_all();
    }
    lk.unlock();
  }
}

void write() {
  std::mt19937 rng;
  rng.seed(std::random_device()());
  std::uniform_int_distribution<std::mt19937::result_type> dist(0, 20); 
  std::unique_lock<std::mutex> lk(m, std::defer_lock);
  for(int i = 0; i < X; i++) {
    std::this_thread::sleep_for(std::chrono::milliseconds(dist(rng)));
    lk.lock();
    if(reader > 0) {
      writer_cond.wait(lk, [](){ return reader == 0; });
    }
    readers_count = -1;
    lk.unlock();
    c++;
    std::cout << "written value: " << c << ", number of readers: " << reader << std::endl;
    lk.lock();
    reader = 0;
    reader_cond.notify_all();
    writer_cond.notify_all();
    lk.unlock();
  }
}

int main() {
  const int NUM_READERS = 5;
  const int NUM_WRITERS = 6;
  std:: cout << std::thread::hardware_concurrency() << std::endl;
  std::vector<std::thread> threads;
  for(int i = 0; i < NUM_READERS; i++) {
    threads.push_back(std::thread{read});
  }
  for(int i = 0; i < NUM_WRITERS; i++) {
    threads.push_back(std::thread{write});
  }
  for(int i = 0; i < NUM_READERS + NUM_WRITERS; i++) {
    threads[i].join();
  }
  return 0;
}
